plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'java'
}

checkstyle {
    toolVersion = '10.13.0'
}

configurations.checkstyle {
    resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
        select("com.google.guava:guava:0")
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        formatAnnotations()
    }
}

group = 'net.barrage'
version = '0.1.2'

java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework:spring-core:6.1.3'
    implementation 'org.springframework:spring-web:6.1.3'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0-M1'
    implementation 'org.glassfish.expressly:expressly:5.0.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation group: 'com.google.auto.service', name: 'auto-service', version: '1.1.1'
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.1.1'
    testImplementation 'com.google.testing.compile:compile-testing:0.21.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                description = 'Maintain data integrity'
                url = 'https://github.com/barrage/tegridy'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/barrage/tegridy/blob/master/LICENSE.md'
                    }
                }    
                developers {
                    developer {
                        id = 'barrage'
                        name = 'Barrage'
                        email = 'devops@barrage.net'
                        organization = 'barrage.net'
                        organizationUrl = 'https://barrage.net'
                    }
                }
                scm {
                    url = 'https://github.com/barrage/tegridy'
                    connection = 'scm:git:git://github.com/barrage/tegridy.git'
                    developerConnection = 'scm:git:git://github.com/barrage/tegridy.git'
                }
                issueManagement {
                    url = 'https://github.com/barrage/tegridy/issues'
                }
            }
            from components.java
        }
    }
}

tasks.register("generateMavenPom", GenerateMavenPom) {
    destination = file("$buildDir/libs/${project.name}-${project.version}.pom")
    pom = publishing.publications.maven.pom
}

task generatePomChecksums {
    dependsOn generateMavenPom

    doLast {
        def pomFile = new File("$buildDir/libs/${project.name}-${project.version}.pom")

        ant.checksum(file: pomFile, algorithm: 'md5', property: 'md5Checksum')
        ant.checksum(file: pomFile, algorithm: 'sha1', property: 'sha1Checksum')

        File md5File = new File("$buildDir/libs/${project.name}-${project.version}.pom.md5")
        md5File.text = ant.properties['md5Checksum']
        
        File sha1File = new File("$buildDir/libs/${project.name}-${project.version}.pom.sha1")
        sha1File.text = ant.properties['sha1Checksum']
    }
}

tasks.compileJava.dependsOn generatePomChecksums

tasks.withType(Jar) { task ->
    task.doLast {
        ant.checksum file: it.archivePath, algorithm: 'md5'
        ant.checksum file: it.archivePath, algorithm: 'sha1'
        ant.checksum file: it.archivePath, algorithm: 'sha-256', fileext: '.sha256'
        ant.checksum file: it.archivePath, algorithm: 'sha-512', fileext: '.sha512'
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true);
        xml.required.set(true);
        csv.required.set(true);
    }
}